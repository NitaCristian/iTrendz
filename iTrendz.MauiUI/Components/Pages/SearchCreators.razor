@page "/search-creators"

@inject ICreatorService CreatorService

<MudTextField @bind-Value="searchTerm"
              Label="Search for creators"
              Adornment="Adornment.End"
              AdornmentIcon=@Icons.Material.Filled.Search
              Immediate="true"
              OnAdornmentClick="() => FilterCreators()"/>

@if (ShowTop)
{
    <MudText Typo="Typo.h3">Top Creators</MudText>

    <MudCarousel ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false" TData="object" Style="height: 500px;">
        @foreach (var creator in AllCreators.Take(3))
        {
            <MudCarouselItem Transition="Transition.Slide">
                <div class="d-flex justify-center align-center mt-5">
                    <MudCard Elevation="3">
                        <MudCardHeader Style="background-color: rgba(89,74,226,1)">
                            <MudGrid Class="align-items-center">
                                <MudItem xs="3">
                                    <!-- Gol -->
                                </MudItem>
                                <MudItem xs="6" Class="d-flex justify-center">
                                    <MudImage Src=@creator.ImageUrl Width="150" Height="150" Alt="Mony the dog" Elevation="25" Class="rounded-circle"/>
                                </MudItem>
                                <MudItem xs="3" Class="d-flex justify-end">
                                    <MudStack>
                                        <MudIconButton Icon="@Icons.Custom.Brands.Facebook" Size="Size.Small" Style="color: white"/>
                                        <MudIconButton Icon="@Icons.Custom.Brands.Instagram" Size="Size.Small" Style="color: white"/>
                                        <MudIconButton Icon="@Icons.Custom.Brands.TikTok" Size="Size.Small" Style="color: white"/>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.h5" Class="text-center mt-3" Style="text-align: center">@creator.Name</MudText>
                            <MudText Typo="Typo.h6" Class="text-center" Style="text-align: center">@creator.Domain</MudText>
                            <div class="d-flex justify-center">
                                <div class="d-flex flex-column align-center mt-3">
                                    <MudRating ReadOnly="true" SelectedValue=@Convert.ToInt32(creator.Rating)/>
                                    <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@LabelText(Convert.ToInt32(creator.Rating))</MudText>
                                </div>
                            </div>
                            <MudStack Row="true" Justify="Justify.Center" Class="mt-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">About Me</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2">Hire Me</MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
}

<MudText Typo="Typo.h3">All Creators</MudText>

<MudDataGrid Items="@FilteredCreators" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <TemplateColumn Title="Name">
            <CellTemplate>
                <div class="d-flex flex-row align-center">
                    <MudImage Src="@context.Item.ImageUrl" Width="50" Height="50" Alt="Employee Image" Class="rounded-circle me-2"/>
                    <MudText>@context.Item.Name</MudText>
                </div>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.Domain" Title="Domain"/>
        <PropertyColumn Property="x => x.Price" Title="Price"/>

        <TemplateColumn Title="Rating">
            <CellTemplate>
                <MudRating ReadOnly="true" Size="@Size.Small" SelectedValue="@context.Item.Rating"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Influencer"/>
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Influencer>? AllCreators;
    private IEnumerable<Influencer>? FilteredCreators;


    private string _searchString;

    private Func<Influencer, bool> QuickFilter => x => string.IsNullOrWhiteSpace(_searchString) || x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);

    private string searchTerm = string.Empty;
    private bool ShowTop = true;

    private void FilterCreators()
    {
        var filtered = AllCreators;

        ShowTop = string.IsNullOrWhiteSpace(searchTerm);

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // TODO: Extend filtration logic here with tags and other properties

        FilteredCreators = filtered.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        //Creators = await CreatorService.GetAllCreatorsAsync();
        AllCreators = new List<Influencer>
        {
            new()
            {
                Id = 1,
                Name = "Sophia Martinez",
                Domain = "Lifestyle",
                Rating = 4,
                ImageUrl = "https://picsum.photos/200/300?random=1"
            },
            new()
            {
                Id = 2,
                Name = "Liam Johnson",
                Domain = "Technology",
                Rating = 4,
                ImageUrl = "https://picsum.photos/200/300?random=2"
            },
            new()
            {
                Id = 3,
                Name = "Olivia Brown",
                Domain = "Fitness",
                Rating = 4,
                ImageUrl = "https://picsum.photos/200/300?random=3"
            },
            new()
            {
                Id = 4,
                Name = "Noah Smith",
                Domain = "Travel",
                Rating = 4,
                ImageUrl = "https://picsum.photos/200/300?random=4"
            },
            new()
            {
                Id = 5,
                Name = "Emma Wilson",
                Domain = "Food",
                Rating = 4,
                ImageUrl = "https://picsum.photos/200/300?random=5"
            }
        };
        FilteredCreators = AllCreators;
    }

    private string LabelText(int creatorRating) => (creatorRating) switch
    {
        1 => "Very bad",
        2 => "Bad",
        3 => "Sufficient",
        4 => "Good",
        5 => "Awesome!",
        _ => "Rate our product!"
    };

}