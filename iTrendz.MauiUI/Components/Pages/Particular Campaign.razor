@page "/particular-campaign"
@* @page "/campaigns/{id}" *@
@using System.Net.Http.Json

@inject HttpClient httpClient

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
	<MudTabPanel Text="Overview">
		<MudText>Content that should appear in an overview page.</MudText>
	</MudTabPanel>
	<MudTabPanel Text="Influencers">
		<MudDataGrid Items="@employees" Filterable="true" QuickFilter="_quickFilter" SortMode="@SortMode.None" Groupable="false">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Periodic Elements</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
							  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
			</ToolBarContent>
			<Columns>
				<TemplateColumn Title="Name">
					<CellTemplate>
						<div class="d-flex flex-row align-center">
							<MudImage Src="@context.Item.AvatarURL" Width="50" Height="50" Alt="Employee Image" Class="rounded-circle me-2" />
							<MudText>@context.Item.Name</MudText>
						</div>
					</CellTemplate>
				</TemplateColumn>

				<PropertyColumn Property="x => x.MonthsEmployed" Title="Followers" />
				<PropertyColumn Property="x => x.Salary" Format="Price" />
				<PropertyColumn Property="x => x.Status" Title="Status" />
				<PropertyColumn Property="x => x.Salary" Format="Location" />

				<TemplateColumn Title="Rating">
					<CellTemplate>
						<MudRating Size="@Size.Small" SelectedValue="@context.Item.Rating" />
					</CellTemplate>
				</TemplateColumn>

				<TemplateColumn>
					<CellTemplate>
						<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
					</CellTemplate>
				</TemplateColumn>
			</Columns>
			<PagerContent>
				<MudDataGridPager T="Employee" />
			</PagerContent>
		</MudDataGrid>

	</MudTabPanel>
	<MudTabPanel Text="Insights">
		<MudGrid Spacing="8">
			
			<MudItem xs="4">
				@* <div class="d-flex justify-between align-center mt-5">
				</div> *@
					<MudCard Class="card-equal-height">
						<MudCardContent>
							<div class="d-flex justify-start align-start">
								<!-- Textul din stânga -->
								<div class="d-flex flex-column">
									<!-- Textul de sus - Organic Reach -->
									<MudStack Wrap="Wrap.Wrap" Spacing="6">

										<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Reach</MudText>
										<MudFlexBreak />

										<!-- Textul de jos - 250k/500k -->
									<MudText Typo="Typo.h5" Style="display: inline-block;font-weight: 550; margin-right: 4px;">@FormatNumber(Campaign.Reach)/@FormatNumber(Campaign.Views)</MudText>

									</MudStack>
								</div>

								<!-- Diagrama din dreapta -->
								<div class="ml-auto">
									<MudChart ChartOptions="new ChartOptions() {ShowLegend=false}" ChartType="ChartType.Donut" Width="100px" Height="100px" InputData="@data">
										<CustomGraphics>
											<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
												@data.Sum().ToString()%
											</text>
										</CustomGraphics>
									</MudChart>
								</div>
							</div>
						</MudCardContent>
					</MudCard>

			</MudItem>
			<MudItem xs="4">
				@* <div class="d-flex justify-between align-center mt-5">
				</div> *@
					<MudCard Class="card-equal-height">
						<MudCardContent>
							<div class="d-flex justify-start align-start">
								<!-- Textul din stânga -->
								<div class="d-flex flex-column">
									<!-- Textul de sus - Organic Reach -->
									<MudStack Wrap="Wrap.Wrap" Spacing="6">

										<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Engagement</MudText>
										<MudFlexBreak />

										<!-- Textul de jos - 250k/500k -->
									<MudText Typo="Typo.h5" Style="display: inline-block;font-weight: 550; margin-right: 4px;">@FormatNumber(Campaign.Engagement)/@FormatNumber(Campaign.Views)</MudText>

									</MudStack>
								</div>

								<!-- Diagrama din dreapta -->
								<div class="ml-auto">
									<MudChart ChartOptions="new ChartOptions() {ShowLegend=false}" ChartType="ChartType.Donut" Width="100px" Height="100px" InputData="@data">
										<CustomGraphics>
											<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="6">
												@data.Sum().ToString()%
											</text>
										</CustomGraphics>
									</MudChart>
								</div>
							</div>
						</MudCardContent>
					</MudCard>
			</MudItem>
			<MudItem xs="4">
					<MudCard Class="card-equal-height pa-4" Style="box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
					<MudStack Row="false" Spacing="3" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween">
						<!-- First Section: Total Posts -->
						<MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="2">
							<!-- Icon for Total Posts -->
							<MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Primary" Size="Size.Large" />
							<!-- Text for Total Posts -->
							<MudStack Spacing="0">
								<MudText Typo="Typo.h4" Class="text-center" Style="font-size: 20px; font-weight: 600;">27</MudText>
								<MudText Typo="Typo.body2" Class="text-center" Style="font-size: 10px; color: #6e6e6e;">Total Posts</MudText>
							</MudStack>
						</MudStack>

						<!-- Second Section: Total Creators -->
						<MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="2">
							<!-- Icon for Total Creators -->
							<MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" />
							<!-- Text for Total Creators -->
							<MudStack Spacing="0">
								<MudText Typo="Typo.h4" Class="text-center" Style="font-size: 20px; font-weight: 600;">27</MudText>
								<MudText Typo="Typo.body2" Class="text-center" Style="font-size: 10px; color: #6e6e6e;">Total Creators</MudText>
							</MudStack>
						</MudStack>
					</MudStack>
				</MudCard>
			</MudItem>
		
			
			<MediaCard Label="Views" Value="@FormatNumber(Campaign.Views)" Icon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Tertiary" />
			<MediaCard Label="Likes" Value="9.1k" Icon="@Icons.Material.Rounded.HeartBroken" IconColor="Color.Secondary" />
			<MediaCard Label="Comments" Value="@FormatNumber(Campaign.Comments)" Icon="@Icons.Material.Rounded.Comment" IconColor="Color.Secondary" />
			<MediaCard Label="Shares" Value="@FormatNumber(Campaign.Shares)" Icon="@Icons.Material.Filled.Share" IconColor="Color.Secondary" />
			<MudItem xs="6">
				<MudCard Class="card-equal-height">
					<MudCardContent>
						<!-- Centrarea textului și a diagramei la mijloc -->
						<div class="d-flex justify-content-center align-items-center flex-column">
							<!-- Textul centrat pe diagrama -->
							<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px; text-align: center;">Grupa de vârstă</MudText>
							<!-- Diagrama de tip pie chart centrată -->
							<MudChart ChartType="ChartType.Pie" Width="150px" Height="150px" InputData="@data_age" InputLabels="@percentLabels" />
						</div>
					</MudCardContent>
				</MudCard>
			</MudItem>
			<MudItem xs="6">
				<MudCard Class="card-equal-height">
					<MudCardContent>
						<!-- Centrarea textului și a diagramei la mijloc -->
						<div class="d-flex justify-content-center align-items-center flex-column">
							<!-- Textul centrat pe diagrama -->
							<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px; text-align: center;">Date demografice</MudText>
							<!-- Diagrama de tip pie chart centrată -->
							<MudChart ChartType="ChartType.Pie" Width="150px" Height="150px" InputData="@data_location" InputLabels="@labels_l" />
						</div>
					</MudCardContent>
				</MudCard>
			</MudItem>
			
		</MudGrid>
	</MudTabPanel>
	<MudTabPanel Text="Posts">
		<MudGrid>
			@foreach(Video video in Videos)
			{
				<MudItem xs="4">
					<MudCard>
						<video width="100%" controls poster="@video.PosterUrl">
							<source src="@video.VideoUrl" type="video/mp4">
						</video>
					</MudCard>
				</MudItem>
			}
		</MudGrid>
	</MudTabPanel>
</MudTabs>
<style>
	.card-equal-height {
		gap:20px;
		height: 100%;
	}
</style>

@code {
	private double[] data_location = { 15, 30, 45, 10 };
	private double[] data_age = { 15, 30, 45, 10 }; 
	private string[] labels = { "18-24", "25-34", "35-44", "45-54" };
	private string[] labels_l = { "Brasov", "Bucuresti", "Cluj", "Iasi" };


	// Calculăm procentele și generăm etichetele cu procente
	private string[] percentLabels => labels.Select((label, index) => $"{label} ({data_age[index] / data_age.Sum() * 100:0.0}%)").ToArray();
	public double[] data = { 28, 5 };


	private string _searchString;

	private Campaign Campaign;
	private List<Video> Videos;

	public record Employee(string Name, string AvatarURL, string Advertise_name, int MonthsEmployed, int Salary, string Status, int Rating);

	public IEnumerable<Employee> employees;

	protected override void OnInitialized()
	{
		// Apelam API pentru a obtine date despre campign
		// Gampaign = await CampaignService.Get(id);

		Videos = new()
		{
			new ()
			{
				Id = 1,
				Title = "Masina in Padure",
				VideoUrl = "/assets/videos/video.mp4",
				PosterUrl = "/assets/image/poster.jpg"
			},
			new ()
			{
				Id = 1,
				Title = "Masina in Padure",
				VideoUrl = "/assets/videos/video.mp4",
				PosterUrl = "/assets/image/poster.jpg"
			},
			new ()
			{
				Id = 1,
				Title = "Masina in Padure",
				VideoUrl = "/assets/videos/video.mp4",
				PosterUrl = "/assets/image/poster.jpg"
			},
			new ()
			{
				Id = 1,
				Title = "Masina in Padure",
				VideoUrl = "/assets/videos/video.mp4",
				PosterUrl = "/assets/image/poster.jpg"
			},
		};

		Campaign = new()
			{
				Views = 13100,
				Likes = 9100,
				Comments = 10200,
				Shares = 20700
			};

		employees = new List<Employee>
		{
			new Employee("Sam", "https://picsum.photos/200", "CPA", 276, 87_000, "Active", 4),
			new Employee("Alicia","https://picsum.photos/200", "Product Manager", 132, 143_000, "On Leave", 5),
			new Employee("Ira", "https://picsum.photos/200", "Developer", 48, 92_000, "Active", 3),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
		};
	}

	public static string FormatNumber(int number)
	{
		return number switch
		{
			>= 1000 and < 1000000 => (number / 1000D).ToString("0.#") + "k",
			>= 1000000 => (number / 1000000D).ToString("0.#") + "M",
			_ => number.ToString()
		};
	}

	private Func<Employee, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};

}