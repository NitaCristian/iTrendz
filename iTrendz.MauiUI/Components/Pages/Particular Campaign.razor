@page "/particular-campaign"
@using System.Net.Http.Json

@inject HttpClient httpClient

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
	<MudTabPanel Text="Overview">
		<MudText>Content that should appear in an overview page.</MudText>
	</MudTabPanel>

	<MudTabPanel Text="Influencers">
		<MudDataGrid Items="@employees" Filterable="true" QuickFilter="_quickFilter" SortMode="@SortMode.None" Groupable="false">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Periodic Elements</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
							  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
			</ToolBarContent>
			<Columns>
				<TemplateColumn Title="Name">
					<CellTemplate>
						<div class="d-flex flex-row align-center">
							<MudImage Src="@context.Item.AvatarURL" Width="50" Height="50" Alt="Employee Image" Class="rounded-circle me-2" />
							<MudText>@context.Item.Name</MudText>
						</div>
					</CellTemplate>
				</TemplateColumn>

				<PropertyColumn Property="x => x.MonthsEmployed" Title="Followers" />
				<PropertyColumn Property="x => x.Salary" Format="Price" />
				<PropertyColumn Property="x => x.Status" Title="Status" />
				<PropertyColumn Property="x => x.Salary" Format="Location" />

				<TemplateColumn Title="Rating">
					<CellTemplate>
						<MudRating Size="@Size.Small" SelectedValue="@context.Item.Rating" />
					</CellTemplate>
				</TemplateColumn>

				<TemplateColumn>
					<CellTemplate>
						<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
					</CellTemplate>
				</TemplateColumn>
			</Columns>
			<PagerContent>
				<MudDataGridPager T="Employee" />
			</PagerContent>
		</MudDataGrid>

	</MudTabPanel>
	<MudTabPanel Text="Insights">
		<MudText>Here we should have insights about the campian like reach, engagement, views, likes, conversions, comments, shares</MudText>
		<MudGrid>
			<MudItem xs="5">
				<div class="d-flex justify-between align-center mt-5">
					<MudCard >
						<MudCardContent>
							<div class="d-flex justify-start align-start">
								<!-- Textul din stânga -->
								<div class="d-flex flex-column">
									<!-- Textul de sus - Organic Reach -->
									<MudStack Wrap="Wrap.Wrap" Spacing="6">

									<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Reach</MudText>
										<MudFlexBreak />

									<!-- Textul de jos - 250k/500k -->
									<MudText Typo="Typo.h5" Style="display: inline-block; margin-right: 4px;">250k/500k</MudText>

									</MudStack>
								</div>

								<!-- Diagrama din dreapta -->
								<div class="ml-auto">
									<MudChart  ChartOptions="new ChartOptions() {ShowLegend=false}" ChartType="ChartType.Donut" Width="80px" Height="80px" InputData="@data" >
										<CustomGraphics>
											<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
												@data.Sum().ToString()%
											</text>
										</CustomGraphics>
									</MudChart>
								</div>
							</div>
						</MudCardContent>
					</MudCard>
				</div>

			</MudItem>
			<MudItem xs="5">
				<div class="d-flex justify-between align-center mt-5">
					<MudCard>
						<MudCardContent>
							<div class="d-flex justify-start align-start">
								<!-- Textul din stânga -->
								<div class="d-flex flex-column">
									<!-- Textul de sus - Organic Reach -->
									<MudStack Wrap="Wrap.Wrap" Spacing="6">

										<MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Engagement</MudText>
										<MudFlexBreak />

										<!-- Textul de jos - 250k/500k -->
										<MudText Typo="Typo.h5" Style="display: inline-block; margin-right: 4px;">250k/500k</MudText>

									</MudStack>
								</div>

								<!-- Diagrama din dreapta -->
								<div class="ml-auto">
									<MudChart ChartOptions="new ChartOptions() {ShowLegend=false}" ChartType="ChartType.Donut" Width="80px" Height="80px" InputData="@data">
										<CustomGraphics>
											<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
												@data.Sum().ToString()%
											</text>
										</CustomGraphics>
									</MudChart>
								</div>
							</div>
						</MudCardContent>
					</MudCard>
				</div>
			</MudItem>

			<MudItem xs="2">
				<MudCard>
					<MudStack Spacing="2" AlignItems="AlignItems.Center" JustifyContent="Center">
						<!-- Icon with primary color and slightly bigger size -->
						<MudIconButton Icon="@Icons.Material.Filled.Image" Color="Color.Primary" Size="Size.Medium" />

						<!-- Adjusted MudStack for text -->
						<MudStack Row="false" AlignItems="AlignItems.Center">
							<!-- Total Posts number -->
							<MudText Typo="Typo.h6" Class="text-center" Style="font-size: 16px;">27</MudText>
							<!-- Description for Total Posts -->
							<MudText Typo="Typo.body2" Class="text-center" Style="font-size: 14px;">Total Posts</MudText>
						</MudStack>
					</MudStack>
				</MudCard>
			</MudItem>

		</MudGrid>

	</MudTabPanel>
</MudTabs>

@code {
	
		public double[] data = { 28, 5 };
		
	
	private string _searchString;


	public record Employee(string Name, string AvatarURL, string Advertise_name, int MonthsEmployed, int Salary, string Status, int Rating);

	public IEnumerable<Employee> employees;

	protected override void OnInitialized()
	{
		employees = new List<Employee>
		{
			new Employee("Sam", "https://picsum.photos/200", "CPA", 276, 87_000, "Active", 4),
			new Employee("Alicia","https://picsum.photos/200", "Product Manager", 132, 143_000, "On Leave", 5),
			new Employee("Ira", "https://picsum.photos/200", "Developer", 48, 92_000, "Active", 3),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
		};
	}

	private Func<Employee, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};

}
