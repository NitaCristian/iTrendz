@page "/contracts/{ContractId:int}"
@inject IContractService ContractService

<TwoPaneLayout>
    <LeftContent>
        <CampaignHeader ImageUrl="@_contract.Campaign.ImageUrl" Title="@_contract.Campaign.Title" Brand="_contract.Campaign.Brand"/>
        <CampaignInfo Campaign="_contract.Campaign" Contract="_contract"/>
    </LeftContent>
    <RightContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Overview">
                <MudStack>
                    <CampaignDescription Description="@_contract.Campaign.Description"/>
                    <CampaignInfluencerRequirements Requirements="_contract.Campaign.Criteria"/>
                    <CampaignPlatforms Platforms="GetPlatforms()"/>
                    <CampaignPlatformDeliverables Deliverables="_contract.Campaign.Requirements"/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Statistics">
                <CampaignInsights ForInfluencer="true"/>
            </MudTabPanel>
            <MudTabPanel Text="Content">
                <MudGrid>
                    @foreach (var post in _contract.Posts)
                    {
                        <MudItem md="6" sm="12">
                            <UploadContent Post="post"/>
                        </MudItem>
                    }
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </RightContent>
</TwoPaneLayout>

@code {
    [Parameter] public int ContractId { get; set; }

    private Contract? _contract;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10000);

        _contract = await ContractService.GetContractAsync(ContractId);
    }

    public List<Platform> GetPlatforms()
    {
        return _contract.Campaign.Requirements
            .Select(requirement => requirement.Platform)
            .Distinct()
            .ToList();
    }


}