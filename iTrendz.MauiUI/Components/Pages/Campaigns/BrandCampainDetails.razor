@page "/campaigns/brand/{Id:int}"
@inject ICampaignService CampaignService

<TwoPaneLayout>
    <LeftContent>
        <CampaignHeader ImageUrl="@_campaign?.ImageUrl" Title="@_campaign?.Title" Brand="_campaign?.Brand"/>
        <CampaignInfo Campaign="_campaign"/>
    </LeftContent>
    <RightContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Overview">
                <MudStack>
                    <CampaignDescription Description="@_campaign?.Description"/>
                    <CampaignInfluencerRequirements Requirements="_campaign?.Criteria"/>
                    <CampaignPlatforms Platforms="GetPlatforms()"/>
                    <CampaignPlatformDeliverables Deliverables="_campaign?.Requirements"/>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Influencers">
                <InfluencersDataGrid Influencers="GetInfluencers()"/>
            </MudTabPanel>
            <MudTabPanel Text="Insights">
                <CampaignInsights Campaign="_campaign"/>
            </MudTabPanel>
            <MudTabPanel Text="Posts">
                <CampaignVideos Videos="GetVideos()"/>
            </MudTabPanel>
        </MudTabs>
    </RightContent>
</TwoPaneLayout>

@code {
    [Parameter] public int Id { get; set; }

    private Campaign? _campaign;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10000);

        _campaign = await CampaignService.GetCampaignAsync(Id);
    }

    public List<Platform> GetPlatforms()
    {
        return _campaign.Requirements
            .Select(requirement => requirement.Platform)
            .Distinct()
            .ToList();
    }

    public List<Influencer> GetInfluencers()
    {
        return _campaign.Contracts
            .Select(contract => contract.Influencer)
            .Distinct()
            .ToList();
    }

    public List<Video> GetVideos()
    {
        return _campaign.Contracts
            .SelectMany(contract => contract.Posts)
            .Where(post => post.Media is Video)
            .Select(post => post.Media as Video)
            .ToList(); // 
    }

}