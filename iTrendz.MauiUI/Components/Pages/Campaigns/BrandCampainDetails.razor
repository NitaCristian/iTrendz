@page "/campaigns/brand/{Id:int}"

<TwoPaneLayout>
	<LeftContent>
		<CampaignHeader ImageUrl="@_imageUrl" Title="@_title" Brand="_brand"/>
		<CampaignInfo Details="_campaignDetails"/>
	</LeftContent>
	<RightContent>
		<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
			<MudTabPanel Text="Overview">
				<MudStack>
					<CampaignDescription Description="@_description"/>
					<CampaignInfluencerRequirements Requirements="_influencerRequirements"/>
					<CampaignPlatforms Platforms="_platforms"/>
					<CampaignPlatformDeliverables Deliverables="_deliverables"/>
				</MudStack>
			</MudTabPanel>
			<MudTabPanel Text="Influencers">
				<MudDataGrid Items="@employees" Filterable="true" QuickFilter="_quickFilter" SortMode="@SortMode.None" Groupable="false">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Periodic Elements</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
						              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<Columns>
						<TemplateColumn Title="Name">
							<CellTemplate>
								<div class="d-flex flex-row align-center">
									<MudImage Src="@context.Item.AvatarURL" Width="50" Height="50" Alt="Employee Image" Class="rounded-circle me-2" />
									<MudText>@context.Item.Name</MudText>
								</div>
							</CellTemplate>
						</TemplateColumn>

						<PropertyColumn Property="x => x.MonthsEmployed" Title="Followers" />
						<PropertyColumn Property="x => x.Salary" Format="Price" />
						<PropertyColumn Property="x => x.Status" Title="Status" />
						<PropertyColumn Property="x => x.Salary" Format="Location" />

						<TemplateColumn Title="Rating">
							<CellTemplate>
								<MudRating Size="@Size.Small" SelectedValue="@context.Item.Rating" />
							</CellTemplate>
						</TemplateColumn>

						<TemplateColumn>
							<CellTemplate>
								<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
							</CellTemplate>
						</TemplateColumn>
					</Columns>
					<PagerContent>
						<MudDataGridPager T="Employee" />
					</PagerContent>
				</MudDataGrid>

			</MudTabPanel>
			<MudTabPanel Text="Insights">
				<CampaignInsights/>
			</MudTabPanel>
			<MudTabPanel Text="Posts">
				<CampaignVideos Videos="_videos"/>
			</MudTabPanel>
		</MudTabs>
	</RightContent>
</TwoPaneLayout>

@code {
	[Parameter] public int Id { get; set; }

	private string _searchString;

	public record Employee(string Name, string AvatarURL, string Advertise_name, int MonthsEmployed, int Salary, string Status, int Rating);
	public IEnumerable<Employee> employees;

	protected override void OnInitialized()
	{
		employees = new List<Employee>
		{
			new Employee("Sam", "https://picsum.photos/200", "CPA", 276, 87_000, "Active", 4),
			new Employee("Alicia","https://picsum.photos/200", "Product Manager", 132, 143_000, "On Leave", 5),
			new Employee("Ira", "https://picsum.photos/200", "Developer", 48, 92_000, "Active", 3),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
			new Employee("John","https://picsum.photos/200", "IT Director", 204, 229_000, "Retired", 4),
		};
	}


	private Func<Employee, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};

	




	private List<Video>? _videos;

	private string? _title;
    private string? _imageUrl;
    private Brand? _brand;
    private string? _description;

    private InfluencerRequirements? _influencerRequirements;
    private List<Platform>? _platforms;
    private List<PlatformDeliverable>? _deliverables;
    private CampaignDetails? _campaignDetails;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10000);

        _videos =
        [
	        new Video
	        {
		        Id = 1,
		        Title = "Masina in Padure",
		        VideoUrl = "/assets/videos/video.mp4",
		        PosterUrl = "/assets/image/poster.jpg"
	        },
	        new Video()
	        {
		        Id = 2,
		        Title = "Masina in Padure",
		        VideoUrl = "/assets/videos/video.mp4",
		        PosterUrl = "/assets/image/poster.jpg"
	        },
	        new Video()
	        {
		        Id = 3,
		        Title = "Masina in Padure",
		        VideoUrl = "/assets/videos/video.mp4",
		        PosterUrl = "/assets/image/poster.jpg"
	        },
	        new Video()
	        {
		        Id = 4,
		        Title = "Masina in Padure",
		        VideoUrl = "/assets/videos/video.mp4",
		        PosterUrl = "/assets/image/poster.jpg"
	        }
        ];
        
        _title = "Tech gadget review";
        _imageUrl = "https://picsum.photos/300/";
        _brand = new Brand
        {
            UserName = "NextGen",
            ImageUrl = "https://picsum.photos/50/"
        };
        _description = "Join our exciting campaign to promote the latest in cutting-edge technology! We’re looking for tech-savvy influencers to review and create content around our brand-new smart gadgets, including wireless headphones, smart home assistants, and portable charging devices. Selected influencers will receive the product free of charge to showcase its features, usability, and design. Whether it's a deep-dive review video or a creative unboxing, we want your authentic voice to reach tech enthusiasts everywhere!";
        _influencerRequirements = new InfluencerRequirements
        {
            MinimumFollowers = 25_000_000,
            AverageViews = 250_000,
            Audience = "Female"
        };

        _campaignDetails = new CampaignDetails
        {
            StartDate = new DateTime(2024, 10, 1),
            EndDate = new DateTime(2024, 10, 15),
            CampaignType = "Unboxing",
            TotalCreators = 25,
            CurrentCreators = 4
        };

        _platforms =
        [
            new Platform { Icon = Icons.Custom.Brands.Instagram, Name = "Instagram" },
            new Platform { Icon = Icons.Custom.Brands.TikTok, Name = "TikTok" },
            new Platform { Icon = Icons.Custom.Brands.YouTube, Name = "YouTube" }
        ];
        _deliverables =
        [
            new PlatformDeliverable
            {
                Platform = new Platform { Icon = Icons.Custom.Brands.Instagram, Name = "Instagram" },
                ContentRequirements =
                [
                    new ContentRequirement
                    {
                        ContentType = "Story",
                        Description = "Up to 15 seconds per story, vertical format (1080 x 1920 pixels), must highlight key features of the gadget, include engaging visuals and polls or questions for interaction."
                    },

                    new ContentRequirement
                    {
                        ContentType = "Posts",
                        Description = "Square (1080 x 1080 pixels) or landscape (1080 x 566 pixels), captions limited to 2,200 characters, must include relevant hashtags and a clear call-to-action (e.g., 'Check out the full review on my blog!')."
                    },

                    new ContentRequirement
                    {
                        ContentType = "Reels",
                        Description = "Up to 60 seconds, vertical format, showcase the gadget in use, include trending audio, and provide quick tips or highlights."
                    }
                ]
            },
            new PlatformDeliverable
            {
                Platform = new Platform { Icon = Icons.Custom.Brands.TikTok, Name = "TikTok" },
                ContentRequirements =
                [
                    new ContentRequirement
                    {
                        ContentType = "Short Videos",
                        Description = "15 to 60 seconds in length, vertical format (1080 x 1920 pixels), must include music or sound clips, focus on engaging demonstrations or unboxing experiences, and follow current TikTok trends."
                    }
                ]
            },
            new PlatformDeliverable
            {
                Platform = new Platform { Icon = Icons.Custom.Brands.YouTube, Name = "YouTube" },
                ContentRequirements =
                [
                    new ContentRequirement
                    {
                        ContentType = "Long-form Videos",
                        Description = "Minimum resolution of 720p, video length of 8+ minutes, must provide in-depth reviews, comparisons, and demonstrations, and include a compelling title and description for SEO optimization."
                    },
                    new ContentRequirement
                    {
                        ContentType = "Shorts",
                        Description = "Up to 60 seconds, vertical format, should highlight the gadget's standout features quickly, engaging hook in the first few seconds, and can include popular music."
                    },
                    new ContentRequirement
                    {
                        ContentType = "Mid-Roll Ads",
                        Description = "Should be placed strategically within videos longer than 8 minutes, clearly indicated and relevant to the gadget being reviewed, ensure smooth transitions into and out of the ad segment."
                    }
                ]
            }
        ];
    }


}

