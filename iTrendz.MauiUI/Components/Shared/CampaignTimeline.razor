<MudTimeline>
    @if (Events is null)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100px" Height="20px" />
        for (var i = 0; i < 5; i++) 
        {
            <MudTimelineItem>
                <ItemOpposite>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100px" Height="20px" />
                </ItemOpposite>
                <ItemContent>
                    <MudSkeleton Animation="Animation.Wave" Width="200px" Height="20px" />
                    <MudSkeleton Animation="Animation.Wave" Width="300px" Height="14px" />
                </ItemContent>
            </MudTimelineItem>
        }
    }
    else
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Campaign Timeline</MudText>
        foreach (var eventItem in Events)
        {
            <MudTimelineItem Color="@(ConvertEventTypeToColor(eventItem.Type))">
                <ItemOpposite>
                    <MudText Color="@(ConvertEventTypeToColor(eventItem.Type))" Typo="Typo.subtitle1">@eventItem.Timestamp.ToString("D")</MudText>
                </ItemOpposite>
                <ItemContent>
                    <MudText Color="@(ConvertEventTypeToColor(eventItem.Type))" Typo="Typo.subtitle1" GutterBottom="true">@eventItem.Title</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@eventItem.Description</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
    }
</MudTimeline>

@code {
    [Parameter] public ICollection<ActionLog>? Events { get; set; }

    private Color ConvertEventTypeToColor(ActionType type)
    {
        return type switch
        {
            ActionType.Info => Color.Info,
            ActionType.Positive => Color.Success,
            ActionType.Negative => Color.Error,
            ActionType.Warning => Color.Warning,
            _ => Color.Default
        };
    }

}