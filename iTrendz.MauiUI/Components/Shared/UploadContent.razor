@using FluentValidation
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<MudCard>
    <MudForm Model="@_model" @ref="@_form">
        <MudCardContent>
            <MudStack>
                <MudTextField @bind-Value="_model.Title" For="@(() => _model.Title)" Immediate="true" Label="Title"/>
                <MudTextField @bind-Value="_model.Description" For="@(() => _model.Description)" Lines="8" Immediate="true" Label="Description"/>

                <MudButton OnClick="() => _expanded = !_expanded">@(_expanded ? "Close" : "AI Caption")</MudButton>
                <MudDivider/>
                <MudCollapse Expanded="_expanded">
                    <MudStack>
                        <MudSelect @bind-Value="_selectedStyle" Label="Style">
                            @foreach (var style in _styles)
                            {
                                <MudSelectItem Value="style">@style</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSwitch @bind-Value="_hashtags" Color="Color.Primary" Label="Add Hashtags" LabelPosition="LabelPosition.Start"/>
                        <MudSwitch @bind-Value="_emojis" Color="Color.Primary" Label="Add Emojis" LabelPosition="LabelPosition.Start"/>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Generate</MudButton>
                    </MudStack>
                </MudCollapse>

                <MudGrid Justify="@Justify.FlexEnd" Spacing="1">
                    <MudItem>
                        <MudFileUpload @ref="@_fileUpload" T="IBrowserFile" OnFilesChanged="UploadFiles" SuppressOnChangeWhenInvalid="true">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload File</MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="@ClearAsync">Clear</MudButton>
                    </MudItem>
                </MudGrid>

                <MudList T="string">
                    @foreach (var media in Post.Media)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@_model">@media.Url</MudListItem>
                    }
                </MudList>
            </MudStack>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    [Parameter] public Post? Post { get; set; }

    private bool _expanded;
    private bool _hashtags;
    private bool _emojis;

    private string _selectedStyle = string.Empty;

    private List<string> _styles =
    [
        "Conversational",
        "Inspirational",
        "Informative",
        "Storytelling",
        "Humorous",
        "Call-to-Action",
        "Minimalist",
        "Emotional",
        "Teaser",
        "Promotional",
        "Questioning",
        "Nostalgic"
    ];

    private MudForm _form = new();
    private Post _model = new();
    private MudFileUpload<IBrowserFile> _fileUpload = new();

    private void UploadFiles(InputFileChangeEventArgs e)
    {
    }

    private async Task Submit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            Snackbar.Add("Submitted!");
        }
    }

    private Task ClearAsync()
        => _fileUpload.ClearAsync();

}