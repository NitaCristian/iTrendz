<MudStack>
    <CampaignTimeline Events="TimelineEvents"/>

    @if (ForInfluencer == false)
    {
        <CampaignBudgetStatistics Statistics="BudgetStatistics"/>
    }

    <MudGrid Spacing="8">
        <MudItem xs="4">
            <StatCard Title="Organic Reach" Value="@CampaignMetrics.Reach" MaxValue="@CampaignMetrics.Views"/>
        </MudItem>
        <MudItem xs="4">
            <StatCard Title="Organic Engagement" Value="@CampaignMetrics.Engagement" MaxValue="@CampaignMetrics.Views"/>
        </MudItem>
        <MudItem xs="4">
            <IconCard Label="Total Posts" Value="@CampaignDetails.TotalPosts.ToString()" Icon="@Icons.Material.Filled.Image" IconColor="Color.Primary"/>
            <IconCard Label="Total Creators" Value="@CampaignDetails.TotalCreators.ToString()" Icon="@Icons.Material.Filled.People" IconColor="Color.Primary"/>
        </MudItem>
        <MudItem xs="3">
            <MediaCard Label="Views" Value="@FormatNumber(CampaignMetrics.Views)" Icon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Tertiary"/>
        </MudItem>
        <MudItem xs="3">
            <MediaCard Label="Likes" Value="@FormatNumber(CampaignMetrics.Likes)" Icon="@Icons.Material.Rounded.HeartBroken" IconColor="Color.Secondary"/>
        </MudItem>
        <MudItem xs="3">
            <MediaCard Label="Comments" Value="@FormatNumber(CampaignMetrics.Comments)" Icon="@Icons.Material.Rounded.Comment" IconColor="Color.Secondary"/>
        </MudItem>
        <MudItem xs="3">
            <MediaCard Label="Shares" Value="@FormatNumber(CampaignMetrics.Shares)" Icon="@Icons.Material.Filled.Share" IconColor="Color.Secondary"/>
        </MudItem>
        <MudItem xs="6">
            <PieChartCard Title="Age Group" ChartData="@CampaignDetails.AgeGroupData" ChartLabels="@AgeGroupLabels"/>
        </MudItem>
        <MudItem xs="6">
            <PieChartCard Title="Demographic Data" ChartData="@CampaignDetails.DemographicData" ChartLabels="@CampaignDetails.DemographicLabels"/>
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    [Parameter] public bool ForInfluencer { get; set; }
    [Parameter] public List<TimelineEvent>? TimelineEvents { get; set; }
    [Parameter] public BudgetStatistics BudgetStatistics { get; set; }
    [Parameter] public CampaignMetrics CampaignMetrics { get; set; }
    [Parameter] public CampaignDetails CampaignDetails { get; set; }

    private string[] AgeGroupLabels => CampaignDetails.AgeGroupCategories.Select((label, index) => $"{label} ({CampaignDetails.AgeGroupData[index] / CampaignDetails.AgeGroupData.Sum() * 100:0.0}%)").ToArray();

    private static string FormatNumber(int number)
    {
        return number switch
        {
            >= 1000 and < 1000000 => (number / 1000D).ToString("0.#") + "k",
            >= 1000000 => (number / 1000000D).ToString("0.#") + "M",
            _ => number.ToString()
        };
    }

}