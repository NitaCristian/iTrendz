<MudStack>
    <CampaignTimeline Events="_timelineEvents"/>
    <CampaignBudgetStatistics Statistics="_budgetStatistics"/>
</MudStack>

<MudGrid Spacing="8">
    <MudItem xs="4">
        <MudCard Class="card-equal-height">
            <MudCardContent>
                <div class="d-flex justify-start align-start">
                    <div class="d-flex flex-column">
                        <MudStack Wrap="Wrap.Wrap" Spacing="6">
                            <MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Reach</MudText>
                            <MudFlexBreak/>
                            <MudText Typo="Typo.h5" Style="display: inline-block;font-weight: 550; margin-right: 4px;">@FormatNumber(Campaign.Reach)/@FormatNumber(Campaign.Views)</MudText>
                        </MudStack>
                    </div>

                    <div class="ml-auto">
                        <MudChart ChartOptions="new ChartOptions() { ShowLegend = false }" ChartType="ChartType.Donut" Width="100px" Height="100px" InputData="@data">
                            <CustomGraphics>
                                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
                                    @data.Sum().ToString()%
                                </text>
                            </CustomGraphics>
                        </MudChart>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>

    </MudItem>
    <MudItem xs="4">
        <MudCard Class="card-equal-height">
            <MudCardContent>
                <div class="d-flex justify-start align-start">
                    <div class="d-flex flex-column">
                        <MudStack Wrap="Wrap.Wrap" Spacing="6">
                            <MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px;">Organic Engagement</MudText>
                            <MudFlexBreak/>
                            <MudText Typo="Typo.h5" Style="display: inline-block;font-weight: 550; margin-right: 4px;">@FormatNumber(Campaign.Engagement)/@FormatNumber(Campaign.Views)</MudText>
                        </MudStack>
                    </div>

                    <div class="ml-auto">
                        <MudChart ChartOptions="new ChartOptions() { ShowLegend = false }" ChartType="ChartType.Donut" Width="100px" Height="100px" InputData="@data">
                            <CustomGraphics>
                                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="6">
                                    @data.Sum().ToString()%
                                </text>
                            </CustomGraphics>
                        </MudChart>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="4">
        <MudCard Class="card-equal-height pa-4" Style="box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
            <MudStack Row="false" Spacing="3" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween">
                <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Primary" Size="Size.Large"/>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h4" Class="text-center" Style="font-size: 20px; font-weight: 600;">27</MudText>
                        <MudText Typo="Typo.body2" Class="text-center" Style="font-size: 10px; color: #6e6e6e;">Total Posts</MudText>
                    </MudStack>
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large"/>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h4" Class="text-center" Style="font-size: 20px; font-weight: 600;">27</MudText>
                        <MudText Typo="Typo.body2" Class="text-center" Style="font-size: 10px; color: #6e6e6e;">Total Creators</MudText>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudCard>
    </MudItem>

    <MediaCard Label="Views" Value="@FormatNumber(Campaign.Views)" Icon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Tertiary"/>
    <MediaCard Label="Likes" Value="9.1k" Icon="@Icons.Material.Rounded.HeartBroken" IconColor="Color.Secondary"/>
    <MediaCard Label="Comments" Value="@FormatNumber(Campaign.Comments)" Icon="@Icons.Material.Rounded.Comment" IconColor="Color.Secondary"/>
    <MediaCard Label="Shares" Value="@FormatNumber(Campaign.Shares)" Icon="@Icons.Material.Filled.Share" IconColor="Color.Secondary"/>

    <MudItem xs="6">
        <MudCard Class="card-equal-height">
            <MudCardContent>
                <div class="d-flex justify-content-center align-items-center flex-column">
                    <MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px; text-align: center;">Grupa de vârstă</MudText>
                    <MudChart ChartType="ChartType.Pie" Width="150px" Height="150px" InputData="@data_age" InputLabels="@percentLabels"/>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">
        <MudCard Class="card-equal-height">
            <MudCardContent>
                <div class="d-flex justify-content-center align-items-center flex-column">
                    <MudText Typo="Typo.h4" Class="mb-2" Style="font-size: 15px; text-align: center;">Date demografice</MudText>
                    <MudChart ChartType="ChartType.Pie" Width="150px" Height="150px" InputData="@data_location" InputLabels="@labels_l"/>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    private BudgetStatistics? _budgetStatistics = new()
    {
        InitialBudget = 10000,
        RemainingBudget = 4500,
        BudgetHistoryData = [10000, 8500, 6000, 4500],
        BudgetHistoryLabels = ["January", "February", "March", "April"],
        BudgetAllocationData = [50, 30, 20],
        BudgetAllocationLabels = ["Marketing", "Development", "Operations"]
    };

    private List<TimelineEvent>? _timelineEvents =
    [
        new TimelineEvent
        {
            Title = "Created",
            Timestamp = new DateTime(2024, 3, 5),
            ColorCode = (int)Color.Info
        },
        new TimelineEvent
        {
            Title = "10 Creators Joined",
            Timestamp = new DateTime(2024, 3, 11),
            ColorCode = (int)Color.Info
        },
        new TimelineEvent
        {
            Title = "2 Creators Left",
            Timestamp = new DateTime(2024, 3, 12),
            ColorCode = (int)Color.Error
        },
        new TimelineEvent
        {
            Title = "Final Content Submission",
            Timestamp = new DateTime(2024, 3, 18),
            ColorCode = (int)Color.Warning
        },
        new TimelineEvent
        {
            Title = "Final Review Meeting",
            Timestamp = new DateTime(2024, 3, 25),
            ColorCode = (int)Color.Warning
        },
        new TimelineEvent
        {
            Title = "Campaign Launched",
            Timestamp = new DateTime(2024, 3, 31),
            ColorCode = (int)Color.Success
        },
        new TimelineEvent
        {
            Title = "Campaign Completed",
            Timestamp = new DateTime(2024, 4, 11),
            ColorCode = (int)Color.Success
        }
    ];


    

    int value = 100;
    private double[] data_buget = { 30, 20, 30, 10 };
    private string[] labels_buget = { "Posts", "Stories/Shorts", "YT Videos", "Blogging" };
    private double[] data_location = { 15, 30, 45, 10 };
    private double[] data_age = { 15, 30, 45, 10 };
    private string[] labels = { "18-24", "25-34", "35-44", "45-54" };
    private string[] labels_l = { "Brasov", "Bucuresti", "Cluj", "Iasi" };
    private string[] percentLabels => labels.Select((label, index) => $"{label} ({data_age[index] / data_age.Sum() * 100:0.0}%)").ToArray();
    private string[] percentLabels_buget => labels_buget.Select((label, index) => $"{label} ({data_buget[index] / data_buget.Sum() * 100:0.0}%)").ToArray();
    public double[] data = { 28, 5 };

    public static string FormatNumber(int number)
    {
        return number switch
        {
            >= 1000 and < 1000000 => (number / 1000D).ToString("0.#") + "k",
            >= 1000000 => (number / 1000000D).ToString("0.#") + "M",
            _ => number.ToString()
        };
    }

    private Campaign Campaign;


    protected override void OnInitialized()
    {
        Campaign = new()
        {
            Views = 13100,
            Likes = 9100,
            Comments = 10200,
            Shares = 20700
        };
    }

}